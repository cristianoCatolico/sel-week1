openapi: 3.0.3
info:
  title: Order API for Ecommerce Project
  description: |-
    Esta API contienen el CRUD para Ordenes
  contact:
    email: familia.lozano.rivero@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8000
tags:
  - name: orders
    description: Operations with order

paths:
  /products:
    get:
      description: Return all products
      operationId: getAllProducts
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: Successful operation
      tags:
        - products
  /orders/{vendorId}:
    get:
      tags:
        - orders
      parameters:
        - in: header
          name: X-API-VERSION
          required: true
          schema:
            type:
              string
          example: v1
        - in: path
          name: vendorId
          required: true
          schema:
            type: string
          example: A01
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders:
    get:
      tags:
        - orders
      summary: Return all orders
      description: Return all orders
      operationId: getAllOrders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
        - orders
      summary: Add a new order
      description: Add a new Order
      operationId: addOrder
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/orderPost"
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/orderPost"
  /orders/{orderNumber}:
    get:
      tags:
        - orders
      summary: Return an specific order details
      parameters:
        - name: orderNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order number exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        productId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        driver:
          $ref: '#/components/schemas/Driver'
        complete:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'

    Driver:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: martin
        carPlate:
          type: string
          example: A1A-123
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
    Product:
      type: object
      properties:
        name:
          type: string
          example: chocolate
    orderPost:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
